// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod component {
        pub mod vepvcf {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod glue {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub struct CsqValue {
                    pub key: _rt::String,
                    pub value: _rt::String,
                }
                impl ::core::fmt::Debug for CsqValue {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("CsqValue")
                            .field("key", &self.key)
                            .field("value", &self.value)
                            .finish()
                    }
                }
                pub type Csq = _rt::Vec<CsqValue>;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum VepVcfErrors {
                    Variantfoundbeforeheader,
                    Variantfountbeforesamples,
                    Unabletogetcsqcols,
                    Unabletoaddrecord,
                    Unabletoparseheaderline,
                    Unabletoaccessheader,
                    Outofrange,
                    Noerror,
                }
                impl VepVcfErrors {
                    pub fn name(&self) -> &'static str {
                        match self {
                            VepVcfErrors::Variantfoundbeforeheader => {
                                "variantfoundbeforeheader"
                            }
                            VepVcfErrors::Variantfountbeforesamples => {
                                "variantfountbeforesamples"
                            }
                            VepVcfErrors::Unabletogetcsqcols => "unabletogetcsqcols",
                            VepVcfErrors::Unabletoaddrecord => "unabletoaddrecord",
                            VepVcfErrors::Unabletoparseheaderline => {
                                "unabletoparseheaderline"
                            }
                            VepVcfErrors::Unabletoaccessheader => "unabletoaccessheader",
                            VepVcfErrors::Outofrange => "outofrange",
                            VepVcfErrors::Noerror => "noerror",
                        }
                    }
                    pub fn message(&self) -> &'static str {
                        match self {
                            VepVcfErrors::Variantfoundbeforeheader => "",
                            VepVcfErrors::Variantfountbeforesamples => "",
                            VepVcfErrors::Unabletogetcsqcols => "",
                            VepVcfErrors::Unabletoaddrecord => "",
                            VepVcfErrors::Unabletoparseheaderline => "",
                            VepVcfErrors::Unabletoaccessheader => "",
                            VepVcfErrors::Outofrange => "",
                            VepVcfErrors::Noerror => "",
                        }
                    }
                }
                impl ::core::fmt::Debug for VepVcfErrors {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("VepVcfErrors")
                            .field("code", &(*self as i32))
                            .field("name", &self.name())
                            .field("message", &self.message())
                            .finish()
                    }
                }
                impl ::core::fmt::Display for VepVcfErrors {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{} (error {})", self.name(), * self as i32)
                    }
                }
                impl std::error::Error for VepVcfErrors {}
                impl VepVcfErrors {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> VepVcfErrors {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => VepVcfErrors::Variantfoundbeforeheader,
                            1 => VepVcfErrors::Variantfountbeforesamples,
                            2 => VepVcfErrors::Unabletogetcsqcols,
                            3 => VepVcfErrors::Unabletoaddrecord,
                            4 => VepVcfErrors::Unabletoparseheaderline,
                            5 => VepVcfErrors::Unabletoaccessheader,
                            6 => VepVcfErrors::Outofrange,
                            7 => VepVcfErrors::Noerror,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Vcfvep {
                    handle: _rt::Resource<Vcfvep>,
                }
                type _VcfvepRep<T> = Option<T>;
                impl Vcfvep {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Vcfvep`.
                    pub fn new<T: GuestVcfvep>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _VcfvepRep<T> = Some(val);
                        let ptr: *mut _VcfvepRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestVcfvep>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestVcfvep>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestVcfvep>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _VcfvepRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestVcfvep>(&self) -> *mut _VcfvepRep<T> {
                        Vcfvep::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Vcfvep`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct VcfvepBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Vcfvep>,
                }
                impl<'a> VcfvepBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestVcfvep>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _VcfvepRep<T> {
                        Vcfvep::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Vcfvep {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:vepvcf/glue")]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]vcfvep"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_vcfvep_cabi<T: GuestVcfvep>() -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = Vcfvep::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_vcfvep_list_variants_cabi<T: GuestVcfvep>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::list_variants(
                        unsafe { VcfvepBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_vcfvep_list_variants<T: GuestVcfvep>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base4 = l0;
                    let len4 = l1;
                    for i in 0..len4 {
                        let base = base4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base4,
                        len4 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_vcfvep_get_csq_headings_cabi<
                    T: GuestVcfvep,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_csq_headings(
                        unsafe { VcfvepBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_vcfvep_get_csq_headings<
                    T: GuestVcfvep,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base4 = l0;
                    let len4 = l1;
                    for i in 0..len4 {
                        let base = base4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base4,
                        len4 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_vcfvep_does_record_have_csq_cabi<
                    T: GuestVcfvep,
                >(arg0: *mut u8, arg1: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::does_record_have_csq(
                        unsafe { VcfvepBorrow::lift(arg0 as u32 as usize) }.get(),
                        arg1 as u32,
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_vcfvep_get_csq_cabi<T: GuestVcfvep>(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_csq(
                        unsafe { VcfvepBorrow::lift(arg0 as u32 as usize) }.get(),
                        arg1 as u32,
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec6 = e;
                            let len6 = vec6.len();
                            let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec6.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result6 = if layout6.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout6);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec6.into_iter().enumerate() {
                                let base = result6
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec5 = e;
                                    let len5 = vec5.len();
                                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec5.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result5 = if layout5.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout5);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec5.into_iter().enumerate() {
                                        let base = result5
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let CsqValue { key: key2, value: value2 } = e;
                                            let vec3 = (key2.into_bytes()).into_boxed_slice();
                                            let ptr3 = vec3.as_ptr().cast::<u8>();
                                            let len3 = vec3.len();
                                            ::core::mem::forget(vec3);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len3;
                                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                            let vec4 = (value2.into_bytes()).into_boxed_slice();
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            ::core::mem::forget(vec4);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len4;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr4.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base.add(0).cast::<*mut u8>() = result5;
                                }
                            }
                            *ptr1
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr1
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result6;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_vcfvep_get_csq<T: GuestVcfvep>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base10 = l1;
                            let len10 = l2;
                            for i in 0..len10 {
                                let base = base10
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base9 = l3;
                                    let len9 = l4;
                                    for i in 0..len9 {
                                        let base = base9
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l5 = *base.add(0).cast::<*mut u8>();
                                            let l6 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l5, l6, 1);
                                            let l7 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l8 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l7, l8, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base9,
                                        len9 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            _rt::cabi_dealloc(
                                base10,
                                len10 * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {}
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_vcfvep_read_cabi<T: GuestVcfvep>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::read(
                        unsafe { VcfvepBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(1).cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                pub trait Guest {
                    type Vcfvep: GuestVcfvep;
                }
                pub trait GuestVcfvep: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:vepvcf/glue")]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]vcfvep"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:vepvcf/glue")]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]vcfvep"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new() -> Self;
                    fn list_variants(&self) -> _rt::Vec<_rt::String>;
                    fn get_csq_headings(&self) -> _rt::Vec<_rt::String>;
                    fn does_record_have_csq(&self, index: u32) -> Option<bool>;
                    fn get_csq(&self, index: u32) -> Result<_rt::Vec<Csq>, VepVcfErrors>;
                    fn read(&self, line: _rt::String) -> Result<bool, VepVcfErrors>;
                }
                #[doc(hidden)]
                macro_rules! __export_component_vepvcf_glue_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "component:vepvcf/glue#[constructor]vcfvep")] unsafe extern "C"
                        fn export_constructor_vcfvep() -> i32 { unsafe {
                        $($path_to_types)*:: _export_constructor_vcfvep_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Vcfvep > () } } #[unsafe
                        (export_name =
                        "component:vepvcf/glue#[method]vcfvep.list-variants")] unsafe
                        extern "C" fn export_method_vcfvep_list_variants(arg0 : * mut
                        u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_vcfvep_list_variants_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Vcfvep > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_component:vepvcf/glue#[method]vcfvep.list-variants")]
                        unsafe extern "C" fn
                        _post_return_method_vcfvep_list_variants(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_method_vcfvep_list_variants::<<$ty as
                        $($path_to_types)*:: Guest >::Vcfvep > (arg0) } } #[unsafe
                        (export_name =
                        "component:vepvcf/glue#[method]vcfvep.get-csq-headings")] unsafe
                        extern "C" fn export_method_vcfvep_get_csq_headings(arg0 : * mut
                        u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_vcfvep_get_csq_headings_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Vcfvep > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_component:vepvcf/glue#[method]vcfvep.get-csq-headings")]
                        unsafe extern "C" fn
                        _post_return_method_vcfvep_get_csq_headings(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_method_vcfvep_get_csq_headings::<<$ty as
                        $($path_to_types)*:: Guest >::Vcfvep > (arg0) } } #[unsafe
                        (export_name =
                        "component:vepvcf/glue#[method]vcfvep.does-record-have-csq")]
                        unsafe extern "C" fn
                        export_method_vcfvep_does_record_have_csq(arg0 : * mut u8, arg1 :
                        i32,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_vcfvep_does_record_have_csq_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Vcfvep > (arg0, arg1) } } #[unsafe
                        (export_name = "component:vepvcf/glue#[method]vcfvep.get-csq")]
                        unsafe extern "C" fn export_method_vcfvep_get_csq(arg0 : * mut
                        u8, arg1 : i32,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_vcfvep_get_csq_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Vcfvep > (arg0, arg1) } } #[unsafe (export_name =
                        "cabi_post_component:vepvcf/glue#[method]vcfvep.get-csq")] unsafe
                        extern "C" fn _post_return_method_vcfvep_get_csq(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_vcfvep_get_csq::<<$ty as
                        $($path_to_types)*:: Guest >::Vcfvep > (arg0) } } #[unsafe
                        (export_name = "component:vepvcf/glue#[method]vcfvep.read")]
                        unsafe extern "C" fn export_method_vcfvep_read(arg0 : * mut u8,
                        arg1 : * mut u8, arg2 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_method_vcfvep_read_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Vcfvep > (arg0, arg1, arg2) } }
                        const _ : () = { #[doc(hidden)] #[unsafe (export_name =
                        "component:vepvcf/glue#[dtor]vcfvep")] #[allow(non_snake_case)]
                        unsafe extern "C" fn dtor(rep : * mut u8) { unsafe {
                        $($path_to_types)*:: Vcfvep::dtor::< <$ty as $($path_to_types)*::
                        Guest >::Vcfvep > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_component_vepvcf_glue_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 3 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 3
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_vepvcf_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::component::vepvcf::glue::__export_component_vepvcf_glue_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::component::vepvcf::glue);
    };
}
#[doc(inline)]
pub(crate) use __export_vepvcf_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:component:vepvcf:vepvcf:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 696] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xbb\x04\x01A\x02\x01\
A\x02\x01B\x19\x01r\x02\x03keys\x05values\x04\0\x09csq-value\x03\0\0\x01p\x01\x04\
\0\x03csq\x03\0\x02\x01m\x08\x18variantfoundbeforeheader\x19variantfountbeforesa\
mples\x12unabletogetcsqcols\x11unabletoaddrecord\x17unabletoparseheaderline\x14u\
nabletoaccessheader\x0aoutofrange\x07noerror\x04\0\x0evep-vcf-errors\x03\0\x04\x04\
\0\x06vcfvep\x03\x01\x01i\x06\x01@\0\0\x07\x04\0\x13[constructor]vcfvep\x01\x08\x01\
h\x06\x01ps\x01@\x01\x04self\x09\0\x0a\x04\0\x1c[method]vcfvep.list-variants\x01\
\x0b\x04\0\x1f[method]vcfvep.get-csq-headings\x01\x0b\x01k\x7f\x01@\x02\x04self\x09\
\x05indexy\0\x0c\x04\0#[method]vcfvep.does-record-have-csq\x01\x0d\x01p\x03\x01j\
\x01\x0e\x01\x05\x01@\x02\x04self\x09\x05indexy\0\x0f\x04\0\x16[method]vcfvep.ge\
t-csq\x01\x10\x01j\x01\x7f\x01\x05\x01@\x02\x04self\x09\x04lines\0\x11\x04\0\x13\
[method]vcfvep.read\x01\x12\x04\0\x15component:vepvcf/glue\x05\0\x04\0\x17compon\
ent:vepvcf/vepvcf\x04\0\x0b\x0c\x01\0\x06vepvcf\x03\0\0\0G\x09producers\x01\x0cp\
rocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
